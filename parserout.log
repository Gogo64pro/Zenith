Program {
  Import "templateTest.zn"
  CLASS EmptyClass {
    // Auto-generated getters/setters enabled
  }
  CLASS Person {
    // Auto-generated getters/setters enabled
    PRIVATEW  FIELD name : PrimitiveType(STRING);
    PROTECTEDW  FIELD age : PrimitiveType(INT);
    PUBLIC  FIELD height : PrimitiveType(DOUBLE);
  }
  CLASS Calculator {
    // Auto-generated getters/setters enabled
    PUBLIC  METHOD add : PrimitiveType(INT) Block {
      return BinaryOp(+)
          Var(a)
          Var(b)
    }
    PROTECTED  METHOD sqrt : PrimitiveType(DOUBLE) Block {
      return BinaryOp(*)
          Var(num)
          Var(num)
    }
  }
  CLASS Vehicle {
    // Auto-generated getters/setters enabled
    PRIVATEW  FIELD model : PrimitiveType(STRING);
    PUBLIC  FIELD year : PrimitiveType(INT);
    PUBLIC  METHOD_CONSTRUCTOR Vehicle Block {
      ExprStmt
        BinaryOp(=)
          MemberAccess(.)
            This
            model
          Var(model)
      ExprStmt
        BinaryOp(=)
          MemberAccess(.)
            This
            year
          Var(year)
    }
  }
  CLASS Animal {
    // Auto-generated getters/setters enabled
    PROTECTEDW  FIELD species : PrimitiveType(STRING);
  }
  CLASS Cat : Animal {
    // Auto-generated getters/setters enabled
    PRIVATEW  FIELD name : PrimitiveType(STRING);
    PUBLIC  METHOD_CONSTRUCTOR Cat Block {
      ExprStmt
        BinaryOp(=)
          MemberAccess(.)
            This
            name
          Var(name)
      ExprStmt
        BinaryOp(=)
          MemberAccess(.)
            This
            species
          Literal(STRING: "Felis catus")
    }
  }
  CLASS BankAccount {
    // Auto-generated getters/setters enabled
    PRIVATEW  FIELD balance : PrimitiveType(DOUBLE);
    PUBLIC CONST  FIELD accountNumber : PrimitiveType(STRING);
    PROTECTEDW  FIELD owner : PrimitiveType(STRING);
    PUBLIC  METHOD_CONSTRUCTOR BankAccountaccountNumber = Var(accountNumber) Block {
      ExprStmt
        BinaryOp(=)
          MemberAccess(.)
            This
            owner
          Var(owner)
      ExprStmt
        BinaryOp(=)
          MemberAccess(.)
            This
            balance
          Literal(NUMBER: 0.0)
    }
    PUBLIC  METHOD deposit : PrimitiveType(VOID) Block {
      ExprStmt
        BinaryOp(+=)
          MemberAccess(.)
            This
            balance
          Var(amount)
    }
    PROTECTED  METHOD withdraw : PrimitiveType(BOOL) Block {
      If
        BinaryOp(<=)
          Var(amount)
          Var(balance)
      Then:
        Block {
          ExprStmt
            BinaryOp(-=)
              Var(balance)
              Var(amount)
          return Literal(BOOL: true)
        }
      return Literal(BOOL: false)
    }
  }
  CLASS X {
    // Auto-generated getters/setters enabled
  }
  CLASS StrangeFormatting {
    // Auto-generated getters/setters enabled
  }
  CLASS ProtectionDemo {
    // Auto-generated getters/setters enabled
    PUBLIC  FIELD a : PrimitiveType(INT);
    PROTECTED  FIELD b : PrimitiveType(INT);
    PRIVATE  FIELD c : PrimitiveType(INT);
    PRIVATEW  FIELD d : PrimitiveType(INT);
    PROTECTEDW  FIELD e : PrimitiveType(INT);
  }
  CLASS DuplicateFields {
    // Auto-generated getters/setters enabled
    PUBLIC  FIELD x : PrimitiveType(INT);
    PRIVATE  FIELD x : PrimitiveType(INT);
  }
  DYNAMIC obj = FreeObject {
      x: Literal(NUMBER: 10)
      y: Literal(NUMBER: 20)
    }
  DYNAMIC inferredObj = FreeObject {
      name: Literal(STRING: "Zenith")
      version: Literal(NUMBER: 1.0)
    }
  main() Block {
      Unsafe {
        DYNAMIC ptr = Call
            Var(malloc)
            Arguments:
            Literal(NUMBER: 1024)
        EmptyStmt
        ExprStmt
          BinaryOp(=)
            ArrayAccess([])
              Var(ptr)
              Literal(NUMBER: 0)
            Literal(NUMBER: 42)
        ExprStmt
          Call
            Var(free)
            Arguments:
            Var(ptr)
      }
    }
  DYNAMIC buffer = Call
      Var(malloc)
      Arguments:
      Literal(NUMBER: 512)
  STATIC x : PrimitiveType(INT) = Literal(NUMBER: 10)
  STRUCT Point {
    // Auto-generated getters/setters enabled
    PUBLIC  FIELD x : PrimitiveType(INT);
    PUBLIC  FIELD y : PrimitiveType(INT);
  }
  STATIC p : NamedType(Point) = Positional{      Literal(NUMBER: 1),       Literal(NUMBER: 2)}
  DYNAMIC y = Literal(STRING: "dynamic")
  DYNAMIC z = Literal(NUMBER: 3.14)
  STATIC config : Type(DYNAMIC) = FreeObject {
      debug: Literal(BOOL: true)
      log: (msg) Block {
    return Call
        MemberAccess(.)
          Var(IO)
          print
        Arguments:
        Var(msg)
  }
    }
  STATIC config2 : Type(DYNAMIC) = FreeObject {
      debug: Literal(BOOL: true)
      log: (msg) Block {
    return Call
        MemberAccess(.)
          Var(IO)
          print
        Arguments:
        Var(msg)
  }
    }
  CLASS Vehicle {
    // Auto-generated getters/setters enabled
    PRIVATEW  FIELD model : PrimitiveType(STRING);
    PUBLIC  FIELD year : PrimitiveType(INT);
    PUBLIC  METHOD_CONSTRUCTOR Vehicle Block {
      ExprStmt
        BinaryOp(=)
          MemberAccess(.)
            This
            model
          Var(m)
      ExprStmt
        BinaryOp(=)
          MemberAccess(.)
            This
            year
          Var(y)
    }
  }
  STRUCT Color {
    // Auto-generated getters/setters enabled
    PUBLIC  FIELD r : PrimitiveType(BYTE);
    PUBLIC  FIELD g : PrimitiveType(BYTE);
    PUBLIC  FIELD b : PrimitiveType(BYTE);
  }
  UNIONANumber{
    PrimitiveType(INT)
,     PrimitiveType(FLOAT)

}
  ASYNCTemplateType(Future<PrimitiveType(STRING)>) fetchData() Block {
      DYNAMIC data = Var(await)
      ExprStmt
        Call
          MemberAccess(.)
            Var(http)
            get
          Arguments:
          Literal(STRING: "example.com")
      return Var(data)
    }
  ACTOR Counter {
    // Auto-generated getters/setters enabled
    PRIVATE  FIELD value : PrimitiveType(INT)Literal(NUMBER: 0);
    PUBLIC  MESSAGE_HANDLER increment : PrimitiveType(INT) Block {
      ExprStmt
        UnaryOp(++)
          MemberAccess(.)
            This
            value

      return MemberAccess(.)
          This
          value
    }
  }
  DYNAMIC name = Literal(STRING: "World")
  main() Block {
      ExprStmt
        Call
          MemberAccess(.)
            Var(IO)
            print
          Arguments:
          Literal(STRING: "Hello, ${name}!")
      If
        Var(condition)
      Then:
        Block {
          ExprStmt
            Call
              MemberAccess(.)
                Var(IO)
                print
              Arguments:
              Literal(STRING: "No braces needed")
        }
    }
  DYNAMIC x = Literal(NUMBER: 10)
  CLASS RestrictedDemo {
    // Auto-generated getters/setters enabled
    PRIVATEW  FIELD adminCode : PrimitiveType(INT);
    PROTECTEDW  FIELD auditId : PrimitiveType(INT);
    PUBLIC CONST  FIELD id : PrimitiveType(STRING);
  }
  CLASS Database {
    // Auto-generated getters/setters enabled
    PRIVATEW  FIELD conn : NamedType(Connection);
    PUBLIC  METHOD_CONSTRUCTOR Database Block {
      ExprStmt
        BinaryOp(=)
          MemberAccess(.)
            This
            conn
          new Connection(Var(url))
    }
    Annotation @Async
    PUBLIC  METHOD query : TemplateType(Future<TemplateType(Result<Type(DYNAMIC), PrimitiveType(STRING)>)>) Block {
      ExprStmt
        Var(try)
      Block {
        DYNAMIC result = Var(await)
        ExprStmt
          Call
            MemberAccess(.)
              Var(conn)
              execute
            Arguments:
            Var(sql)
        return Call
            Var(Ok)
            Arguments:
            Var(result)
      }
      ExprStmt
        Call
          Var(catch)
          Arguments:
          Var(e)
      Block {
        return Call
            Var(Err)
            Arguments:
            MemberAccess(.)
              Var(e)
              message
      }
    }
  }
  main() Block {
      DYNAMIC db = new Database(Literal(STRING: "localhost:5432"))
      EmptyStmt
      DYNAMIC result = Var(await)
      ExprStmt
        Call
          MemberAccess(.)
            Var(db)
            query
          Arguments:
          Literal(STRING: "SELECT * FROM users")
      ExprStmt
        Call
          Var(match)
          Arguments:
          Var(result)
      Block {
        ExprStmt
          Call
            Var(Ok)
            Arguments:
            Var(data)
      }
    }
  DYNAMIC ptr = Call
      Var(malloc)
      Arguments:
      Literal(NUMBER: 10)
  STRUCT Point {
    // Auto-generated getters/setters enabled
    PUBLIC  FIELD x : PrimitiveType(INT);
    PUBLIC  FIELD y : PrimitiveType(INT);
  }
  STATIC p : NamedType(Point) = Positional{      Literal(NUMBER: 1.5),       Literal(NUMBER: 2)}
  CLASS Demo {
    // Auto-generated getters/setters enabled
  }
}
