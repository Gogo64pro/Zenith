Error at 149:8 - Expected IDENTIFIER
Error at 150:26 - Expected IDENTIFIER
Error at 151:16 - Expected IDENTIFIER
Error at 164:18 - Expected parameter name
Error at 167:9 - Expected IDENTIFIER
Error at 172:3 - Expected IDENTIFIER
Error at 175:14 - Expected IDENTIFIER
Error at 184:11 - Expected type after declaration
Error at 194:41 - Expected LBRACE
Error at 196:13 - Expected type after declaration
Error at 197:13 - Expected IDENTIFIER
Error at 198:17 - Expected IDENTIFIER
Error at 199:23 - Expected IDENTIFIER
Error at 217:8 - Expected IDENTIFIER
Error at 221:14 - Expected IDENTIFIER
Error at 226:13 - Expected type after declaration
Program {
  CLASS EmptyClass {
  }
  CLASS Person {
    PRIVATEW  FIELD name : PrimitiveType(STRING);
    PROTECTEDW  FIELD age : PrimitiveType(INT);
    PUBLIC  FIELD height : PrimitiveType(DOUBLE);
  }
  CLASS Calculator {
    PUBLIC  METHOD add : PrimitiveType(INT) Block {
      return BinaryOp(+)
          Var(a)
          Var(b)
    }
    PROTECTED  METHOD sqrt : PrimitiveType(DOUBLE) Block {
      return BinaryOp(*)
          Var(num)
          Var(num)
    }
  }
  CLASS Vehicle {
    PRIVATEW  FIELD model : PrimitiveType(STRING);
    PUBLIC  FIELD year : PrimitiveType(INT);
    PUBLIC  METHOD_CONSTRUCTOR Vehicle Block {
      ExprStmt
        BinaryOp(=)
          MemberAccess(.)
            This
            model
          Var(model)
      ExprStmt
        BinaryOp(=)
          MemberAccess(.)
            This
            year
          Var(year)
    }
  }
  CLASS Animal {
    PROTECTEDW  FIELD species : PrimitiveType(STRING);
  }
  CLASS Cat {
    PRIVATEW  FIELD name : PrimitiveType(STRING);
    PUBLIC  METHOD_CONSTRUCTOR Cat Block {
      ExprStmt
        BinaryOp(=)
          MemberAccess(.)
            This
            name
          Var(name)
      ExprStmt
        BinaryOp(=)
          MemberAccess(.)
            This
            species
          Literal(STRING: "Felis catus")
    }
  }
  CLASS BankAccount {
    PRIVATEW  FIELD balance : PrimitiveType(DOUBLE);
    PUBLIC CONST  FIELD accountNumber : PrimitiveType(STRING);
    PROTECTEDW  FIELD owner : PrimitiveType(STRING);
    PUBLIC  METHOD_CONSTRUCTOR BankAccountaccountNumber = Var(accountNumber) Block {
      ExprStmt
        BinaryOp(=)
          MemberAccess(.)
            This
            owner
          Var(owner)
      ExprStmt
        BinaryOp(=)
          MemberAccess(.)
            This
            balance
          Literal(NUMBER: 0.0)
    }
    PUBLIC  METHOD deposit : NamedType(void) Block {
      ExprStmt
        BinaryOp(+=)
          MemberAccess(.)
            This
            balance
          Var(amount)
    }
    PROTECTED  METHOD withdraw : NamedType(bool) Block {
      If
        BinaryOp(<=)
          Var(amount)
          Var(balance)
      Then:
        Block {
          ExprStmt
            BinaryOp(-=)
              Var(balance)
              Var(amount)
          return Literal(BOOL: true)
        }
      return Literal(BOOL: false)
    }
  }
  CLASS X {
  }
  CLASS StrangeFormatting {
  }
  CLASS ProtectionDemo {
    PUBLIC  FIELD a : PrimitiveType(INT);
    PROTECTED  FIELD b : PrimitiveType(INT);
    PRIVATE  FIELD c : PrimitiveType(INT);
    PRIVATEW  FIELD d : PrimitiveType(INT);
    PROTECTEDW  FIELD e : PrimitiveType(INT);
  }
  CLASS DuplicateFields {
    PUBLIC  FIELD x : PrimitiveType(INT);
    PRIVATE  FIELD x : PrimitiveType(INT);
  }
DYNAMIC obj = FreeObject {
  x: Literal(NUMBER: 10)
  y: Literal(NUMBER: 20)
}
DYNAMIC inferredObj = FreeObject {
  name: Literal(STRING: "Zenith")
  version: Literal(NUMBER: 1.0)
}
  main() Block {
      Block {
DYNAMIC ptr = Call
  Var(malloc)
  Arguments:
  Literal(NUMBER: 1024)
        EmptyStmt
        ExprStmt
          BinaryOp(=)
            ArrayAccess([])
              Var(ptr)
              Literal(NUMBER: 0)
            Literal(NUMBER: 42)
        ExprStmt
          Call
            Var(free)
            Arguments:
            Var(ptr)
      }
    }
DYNAMIC buffer = Call
  Var(malloc)
  Arguments:
  Literal(NUMBER: 512)
STATIC x : PrimitiveType(INT) = Literal(NUMBER: 10)
STATIC p : NamedType(Point) = Positional{  Literal(NUMBER: 1),   Literal(NUMBER: 2)}
DYNAMIC y = Literal(STRING: "dynamic")
DYNAMIC z = Literal(NUMBER: 3.14)
STATIC config : Type(DYNAMIC) = FreeObject {
  debug: Literal(BOOL: true)
  log: (msg) Block {
    return Call
        MemberAccess(.)
          Var(IO)
          print
        Arguments:
        Var(msg)
  }
}
STATIC config2 : Type(DYNAMIC) = FreeObject {
  debug: Literal(BOOL: true)
  log: (msg) Block {
    return Call
        MemberAccess(.)
          Var(IO)
          print
        Arguments:
        Var(msg)
  }
}
  CLASS Vehicle {
    PRIVATEW  FIELD model : PrimitiveType(STRING);
    PUBLIC  FIELD year : PrimitiveType(INT);
    PUBLIC  METHOD_CONSTRUCTOR Vehicle Block {
      ExprStmt
        BinaryOp(=)
          MemberAccess(.)
            This
            model
          Var(m)
      ExprStmt
        BinaryOp(=)
          MemberAccess(.)
            This
            year
          Var(y)
    }
  }
DYNAMIC data = Var(await)
DYNAMIC name = Literal(STRING: "World")
DYNAMIC x = Literal(NUMBER: 10)
  CLASS RestrictedDemo {
    PRIVATEW  FIELD adminCode : PrimitiveType(INT);
    PROTECTEDW  FIELD auditId : PrimitiveType(INT);
  }
  CLASS Database {
    PRIVATEW  FIELD conn : NamedType(Connection);
    PUBLIC  METHOD_CONSTRUCTOR Database Block {
      ExprStmt
        BinaryOp(=)
          MemberAccess(.)
            This
            conn
          new Connection(Var(url))
    }
  }
  main() Block {
DYNAMIC db = new Database(Literal(STRING: "localhost:5432"))
      EmptyStmt
DYNAMIC result = Var(await)
      ExprStmt
        Call
          MemberAccess(.)
            Var(db)
            query
          Arguments:
          Literal(STRING: "SELECT * FROM users")
      ExprStmt
        Call
          Var(match)
          Arguments:
          Var(result)
      Block {
        ExprStmt
          Call
            Var(Ok)
            Arguments:
            Var(data)
      }
    }
DYNAMIC ptr = Call
  Var(malloc)
  Arguments:
  Literal(NUMBER: 10)
STATIC p : NamedType(Point) = Positional{  Literal(NUMBER: 1.5),   Literal(NUMBER: 2)}
  CLASS Demo {
  }
}
